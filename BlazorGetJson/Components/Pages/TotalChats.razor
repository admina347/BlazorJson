@page "/total-chats"
@rendermode InteractiveServer

@inject JsonFileService JsonFileService

<PageTitle>Total Chats Report</PageTitle>

<h1>Total Chats Report</h1>

@if (report == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Report name: @report.Name</p>
    <p>Report distribution: @report.Request.Distribution</p>
    <p>Total: @report.Total</p>
    <p>From: @currentWeekStart</p>
    <p>To: @currentWeekEnd.AddDays(-1)</p>
    <p>Groups: @string.Join(", ", report.Request.Filters.Groups.Values)</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in GetRecordsForCurrentWeek())
            {
                <tr>
                    <td>@record.Key</td>
                    <td>@record.Value.Total</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="PreviousWeek">Previous Week</button></li>
            <li class="page-item"><button class="page-link" @onclick="NextWeek">Next Week</button></li>
        </ul>
    </nav>
}

@code {
    private ReportsModel report;
    private DateTime currentWeekStart;
    private DateTime currentWeekEnd;

    private DateTime startDate;
    private DateTime endDate;

    private DateTime toDate;

    protected override void OnInitialized()
    {
        report = JsonFileService.ReadJsonFile<ReportsModel>("./Data/total_chats.json");
        SetCurrentWeek();
    }

    private void SetCurrentWeek()
    {
        // Assuming the From and To filters are DateTimeOffset
        DateTimeOffset fromDateOffset = report.Request.Filters.From;
        DateTimeOffset toDateOffset = report.Request.Filters.To;

        // Convert DateTimeOffset to DateTime
        DateTime fromDate = fromDateOffset.DateTime;
        toDate = toDateOffset.DateTime;

        // Calculate the start and end of the current week
        currentWeekStart = fromDate.Date;    //fromDate.AddDays((DateTime.Now - fromDate).Days % 7);
        startDate = fromDate.Date;
        endDate = toDate.Date;
        
        currentWeekEnd = currentWeekStart.AddDays(7);
    }

    private IEnumerable<KeyValuePair<string, Record>> GetRecordsForCurrentWeek()
    {
        // Filter records based on the current week
        return report.Records.Where(r => DateTime.Parse(r.Key) >= currentWeekStart && DateTime.Parse(r.Key) < currentWeekEnd);
    }

    private void PreviousWeek()
    {
        if (startDate < currentWeekStart)
        {
            currentWeekStart = currentWeekStart.AddDays(-7);
            currentWeekEnd = currentWeekEnd.AddDays(-7);
            StateHasChanged();
        }
    }

    private void NextWeek()
    {
        if (currentWeekEnd < toDate)
        {
            currentWeekStart = currentWeekStart.AddDays(7);
            currentWeekEnd = currentWeekEnd.AddDays(7);
            StateHasChanged();
        }     
    }
}
