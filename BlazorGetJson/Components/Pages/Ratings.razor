@page "/ratings"
@rendermode InteractiveServer

@inject JsonFileService JsonFileService
@inject PaginationService PaginationService

<PageTitle>Ratings Report</PageTitle>

<h1>Ratings Report</h1>

@if (report == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Report name: @report.Name</p>
    <p>Report distribution: @report.Request.Distribution</p>
    <p>Total: @report.Total</p>
    <p>From: @PaginationService.From</p>
    <p>To: @PaginationService.To</p>
    <p>Groups: @string.Join(", ", report.Request.Filters.Groups.Values)</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Bad</th>
                <th>Chats</th>
                <th>Good</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in PaginationService.GetCurrentPageRecords())
            {
                <tr>
                    <td>@record.Key</td>
                    <td>@record.Value.Bad</td>
                    <td>@record.Value.Chats</td>
                    <td>@record.Value.Good</td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="PreviousPage">Previous Page</button></li>
            <li class="page-item"><button class="page-link" @onclick="NextPage">Next Page</button></li>
        </ul>
    </nav>
}

@code {
    private ReportsModel report;

    protected override void OnInitialized()
    {
        report = JsonFileService.ReadJsonFile<ReportsModel>("./Data/ratings.json");
        
        // Initialize the PaginationService with the report and current week dates
        PaginationService.Initialize(report);
    }

    private void NextPage()
    {
        PaginationService.NextPage();
        StateHasChanged();
    }

    private void PreviousPage()
    {
        PaginationService.PreviousPage();
    }
}